#!/usr/bin/env bash

# HELPERS

function banner() {
    echo -e $CYAN
    echo -e '______     _                     '
    echo -e '| ___ \   | |                    '
    echo -e '| |_/ /___| | ___  __ _ ___  ___ '
    echo -e '|    // _ \ |/ _ \/ _` / __|/ _ \'
    echo -e '| |\ \  __/ |  __/ (_| \__ \  __/'
    echo -e '\_| \_\___|_|\___|\__,_|___/\___|'
    echo -e $COLOR_RESET
}

function help() {
    echo -e $GREEN"Usage"$COLOR_RESET
    echo -e "\t`basename $0` <version-number>"
    echo -e "\n"
    echo -e $GREEN"Example"$COLOR_RESET
    echo -e "\trelease 1.0.0"
    echo -e "\n"
}

function check_args() {
    if [ -z "$1" ]; then
        banner
        help
        exit 1
    fi

    if [ "$1" == "help" ]; then
        banner
        help
        exit 0
    fi
}



# IMPORT UTILS

source "`dirname $0`"/../utils.sh

# VARIABLES

PACKAGE_FILE="$PWD/package.json"


# EXECUTION

set -e

## Arguments and Flags

RELEASE_NUM=""
FINISH_RELEASE=0

while (( "$#" )); do
  case "$1" in
    -f|-F)
      FINISH_RELEASE=1
      shift
      ;;
    -*|--*=) # unsupported flags
      print_error "Unsupported flag $1"
      exit 1
      ;;
    *) # preserve positional arguments
      RELEASE_NUM="$RELEASE_NUM $1"
      shift
      ;;
  esac
done
eval set -- "$RELEASE_NUM"

RELEASE_NUM=${RELEASE_NUM//[[:blank:]]/}

## validation

check_args $RELEASE_NUM

is_software_installed "npm" "Please visit: https://nodejs.org"

is_file_present $PACKAGE_FILE "Run command: npm init"

is_software_installed "git" "Please visit: https://git-scm.com/"

is_git_flow

is_in_git_flow_dev_branch

is_git_status_clean

is_valid_sem_version $RELEASE_NUM

is_new_release $RELEASE_NUM "`current_version`"

## release

CURRENT_VERSION="`current_version`"

banner

echo -e "\t"$YELLOW$CURRENT_VERSION$COLOR_RESET " -> " $CYAN$RELEASE_NUM$COLOR_RESET "\n"

read -p "Do you want to proceed? (y/N) " CONFIRM_RELEASE

if [ "$CONFIRM_RELEASE" == "y" ]
then
    git flow release start "v$RELEASE_NUM"

    npm --no-git-tag-version version $RELEASE_NUM

    git add .

    git commit -m "release candidate v$RELEASE_NUM"

    echo -e "\n\t"$GREEN"Release"$COLOR_RESET" $RELEASE_NUM "$GREEN"started!"$COLOR_RESET

    if [ $FINISH_RELEASE -eq 0 ]
    then
        echo -e $CYAN"TODO"$COLOR_RESET
        echo -e "\tDon't foreget to push $(parse_git_branch)"
        echo -e $GREEN"Hint"$COLOR_RESET
        echo -e "\tRun command: git push --set-upstream origin $(parse_git_branch)"
        echo -e "\n"
        exit 0
    else
        echo -e $CYAN"CLOSE RELEASE"$COLOR_RESET
        git flow release finish -m "v$RELEASE_NUM" "v$RELEASE_NUM"

        REMOTE=`git_has_remote`
        if [ $REMOTE -eq 1 ]
        then
            git push --all
            git push --tags
        fi
        exit 0
    fi

else
    echo -e "\n\t"$RED"Bye Bye"$COLOR_RESET"\n"
    exit 0
fi