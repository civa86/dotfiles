#compdef dotfiles

_dotfiles() {
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
  command)
    local -a subcommands
    for cmd in $(find $DOTFILES_HOME/scripts/commands -name "*.sh" -type f | sort); do
      local cmd_name=$(basename $cmd | sed "s/.sh//g")
      local cmd_desc=$(cat $cmd | grep "#completion_desc::" | awk -F'::' '{print $NF}')
      subcommands+=("$cmd_name:$cmd_desc")
    done
    _describe -t commands 'dotfiles' subcommands
    ;;

  options)
    case $line[1] in
    code_style)
      __code_style
      ;;
    release)
      __release
      ;;
    esac

    ;;
  esac
}

__code_style() {
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
  command)
    local -a subcommands
    for r in $(cat $DOTFILES_HOME/scripts/commands/code_style.sh | grep AVAILABLE_RULES= | awk -F"=" '{print $NF}' | sed 's/"//g'); do
      subcommands+=("$r")
    done
    _describe -t commands 'dotfiles code_style' subcommands
    ;;

  options) ;;

  esac
}

__release() {
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
  command)
    source $DOTFILES_HOME/scripts/utils.sh
    local -a subcommands
    local PACKAGE_TYPE=$(get_package_type)
    if [ ! -z "$PACKAGE_TYPE" ]; then
      local NEW_VERSION="$(get_package_version $PACKAGE_TYPE | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')"
      subcommands=("$NEW_VERSION")
    else
      subcommands=("X.X.X")
    fi
    _describe -t commands 'dotfiles release' subcommands
    ;;

  options)
    case $line[2] in
    -* | --*)
      _arguments \
        --close'[Fetch from origin before performing finish]'
      ;;
    esac
    ;;

  esac
}

_dotfiles "$@"
